// <auto-generated />
using System;
using Capstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b93ad2b-3e8a-4617-82e5-65d3300b94b7",
                            ConcurrencyStamp = "4b93ad2b-3e8a-4617-82e5-65d3300b94b7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ccd897ef-cb5d-4bea-9af9-3c47c86d3355",
                            ConcurrencyStamp = "ccd897ef-cb5d-4bea-9af9-3c47c86d3355",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUserPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08399e0f-9230-4cfe-a22d-2cdd7f3b3fd6",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mario",
                            LastName = "Rossi",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED0v+UUOGkjKoHGnwjmc7t6eTQc8TYZkwnTu8weseDCvKAoPfj9ZE3ZolUADjFknkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1c9e03c-a638-4ea6-a8cd-27c7c1b45811",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54f2ed46-a8c6-4141-bd8b-54c84f43b408",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Luca",
                            LastName = "Bianchi",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzTsYymz+60UGHOSDq4CMxcv+fs12728XqcvDwp4oMzdNMcTdeXunZoWyKCH5a00A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4a26207-d30c-4e62-bf54-49dc559a77a6",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        });
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Capstone.Models.Carrello", b =>
                {
                    b.Property<int>("IdCarrello")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarrello"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdCarrello");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carrelli");
                });

            modelBuilder.Entity("Capstone.Models.CarrelloItem", b =>
                {
                    b.Property<int>("IdCarrelloItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarrelloItem"));

                    b.Property<int>("CarrelloIdCarrello1")
                        .HasColumnType("int");

                    b.Property<int>("IdCarrello")
                        .HasColumnType("int");

                    b.Property<int>("IdItinerario")
                        .HasColumnType("int");

                    b.Property<int>("IdItinerarioFasciaPrezzo")
                        .HasColumnType("int");

                    b.Property<int>("IdPartenza")
                        .HasColumnType("int");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("IdCarrelloItem");

                    b.HasIndex("IdCarrello");

                    b.HasIndex("IdItinerario");

                    b.HasIndex("IdItinerarioFasciaPrezzo");

                    b.HasIndex("IdPartenza");

                    b.ToTable("CarrelloItems");
                });

            modelBuilder.Entity("Capstone.Models.FasciaDiPrezzo", b =>
                {
                    b.Property<int>("IdFasciaDiPrezzo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFasciaDiPrezzo"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdFasciaDiPrezzo");

                    b.ToTable("FasceDiPrezzo");

                    b.HasData(
                        new
                        {
                            IdFasciaDiPrezzo = 1,
                            Nome = "Economica"
                        },
                        new
                        {
                            IdFasciaDiPrezzo = 2,
                            Nome = "Standard"
                        },
                        new
                        {
                            IdFasciaDiPrezzo = 3,
                            Nome = "Lusso"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.Property<int>("IdItinerario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItinerario"));

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<string>("ImmagineUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeItinerario")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PaeseId")
                        .HasColumnType("int");

                    b.HasKey("IdItinerario");

                    b.HasIndex("PaeseId");

                    b.ToTable("Itinerari");

                    b.HasData(
                        new
                        {
                            IdItinerario = 1,
                            Durata = 9,
                            ImmagineUrl = "https://example.com/images/thailandia.jpg",
                            NomeItinerario = "Tour in Thailandia",
                            PaeseId = 1
                        },
                        new
                        {
                            IdItinerario = 2,
                            Durata = 12,
                            ImmagineUrl = "https://example.com/images/cina.jpg",
                            NomeItinerario = "Tour in Cina",
                            PaeseId = 2
                        },
                        new
                        {
                            IdItinerario = 3,
                            Durata = 15,
                            ImmagineUrl = "https://example.com/images/giappone.jpg",
                            NomeItinerario = "Tour in Giappone",
                            PaeseId = 3
                        });
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioFasciaPrezzo", b =>
                {
                    b.Property<int>("IdItinerarioFasciaPrezzo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItinerarioFasciaPrezzo"));

                    b.Property<int>("IdFasciaDiPrezzo")
                        .HasColumnType("int");

                    b.Property<int>("IdItinerario")
                        .HasColumnType("int");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("IdItinerarioFasciaPrezzo");

                    b.HasIndex("IdFasciaDiPrezzo");

                    b.HasIndex("IdItinerario");

                    b.ToTable("ItinerarioFascePrezzo");

                    b.HasData(
                        new
                        {
                            IdItinerarioFasciaPrezzo = 1,
                            IdFasciaDiPrezzo = 1,
                            IdItinerario = 1,
                            Prezzo = 999.99m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 2,
                            IdFasciaDiPrezzo = 2,
                            IdItinerario = 1,
                            Prezzo = 1499.99m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 3,
                            IdFasciaDiPrezzo = 3,
                            IdItinerario = 1,
                            Prezzo = 1999.99m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 4,
                            IdFasciaDiPrezzo = 1,
                            IdItinerario = 2,
                            Prezzo = 1200.00m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 5,
                            IdFasciaDiPrezzo = 2,
                            IdItinerario = 2,
                            Prezzo = 1700.00m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 6,
                            IdFasciaDiPrezzo = 3,
                            IdItinerario = 2,
                            Prezzo = 2200.00m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 7,
                            IdFasciaDiPrezzo = 1,
                            IdItinerario = 3,
                            Prezzo = 1500.00m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 8,
                            IdFasciaDiPrezzo = 2,
                            IdItinerario = 3,
                            Prezzo = 2000.00m
                        },
                        new
                        {
                            IdItinerarioFasciaPrezzo = 9,
                            IdFasciaDiPrezzo = 3,
                            IdItinerario = 3,
                            Prezzo = 2500.00m
                        });
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioGiorno", b =>
                {
                    b.Property<int>("IdItinerarioGiorno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdItinerarioGiorno"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Giorno")
                        .HasColumnType("int");

                    b.Property<int>("IdItinerario")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdItinerarioGiorno");

                    b.HasIndex("IdItinerario");

                    b.ToTable("ItinerarioGiorni");

                    b.HasData(
                        new
                        {
                            IdItinerarioGiorno = 1,
                            Descrizione = "Arrivo all'aeroporto internazionale di Bangkok e trasferimento in hotel.",
                            Giorno = 1,
                            IdItinerario = 1,
                            Titolo = "Arrivo in Thailandia"
                        },
                        new
                        {
                            IdItinerarioGiorno = 2,
                            Descrizione = "Visita al Tempio del Buddha di Smeraldo e alla Grande Sala del Trono.",
                            Giorno = 2,
                            IdItinerario = 1,
                            Titolo = "Visita al Tempio"
                        },
                        new
                        {
                            IdItinerarioGiorno = 3,
                            Descrizione = "Esplorazione dei famosi mercati galleggianti e pranzo tipico.",
                            Giorno = 3,
                            IdItinerario = 1,
                            Titolo = "Mercati galleggianti"
                        },
                        new
                        {
                            IdItinerarioGiorno = 4,
                            Descrizione = "Visita al Palazzo Reale e al Museo Nazionale.",
                            Giorno = 4,
                            IdItinerario = 1,
                            Titolo = "Tour della città"
                        },
                        new
                        {
                            IdItinerarioGiorno = 5,
                            Descrizione = "Escursione a Ayutthaya, la storica capitale del regno del Siam.",
                            Giorno = 5,
                            IdItinerario = 1,
                            Titolo = "Visita a Ayutthaya"
                        },
                        new
                        {
                            IdItinerarioGiorno = 6,
                            Descrizione = "Arrivo a Ko Samui per una giornata di relax sulle spiagge esotiche.",
                            Giorno = 6,
                            IdItinerario = 1,
                            Titolo = "Isola di Ko Samui"
                        },
                        new
                        {
                            IdItinerarioGiorno = 7,
                            Descrizione = "Giornata dedicata allo snorkeling e visita delle isole vicine a Ko Samui.",
                            Giorno = 7,
                            IdItinerario = 1,
                            Titolo = "Snorkeling e visite alle isole"
                        },
                        new
                        {
                            IdItinerarioGiorno = 8,
                            Descrizione = "Trasferimento a Chiang Mai e visita ai templi locali.",
                            Giorno = 8,
                            IdItinerario = 1,
                            Titolo = "Visita a Chiang Mai"
                        },
                        new
                        {
                            IdItinerarioGiorno = 9,
                            Descrizione = "Tempo libero per shopping e ritorno all'aeroporto per il volo di ritorno.",
                            Giorno = 9,
                            IdItinerario = 1,
                            Titolo = "Partenza"
                        },
                        new
                        {
                            IdItinerarioGiorno = 10,
                            Descrizione = "Arrivo a Pechino, trasferimento in hotel e visita alla Piazza Tiananmen.",
                            Giorno = 1,
                            IdItinerario = 2,
                            Titolo = "Arrivo in Cina"
                        },
                        new
                        {
                            IdItinerarioGiorno = 11,
                            Descrizione = "Visita alla Città Proibita e al Tempio del Cielo.",
                            Giorno = 2,
                            IdItinerario = 2,
                            Titolo = "Città Proibita"
                        },
                        new
                        {
                            IdItinerarioGiorno = 12,
                            Descrizione = "Escursione alla Grande Muraglia Cinese.",
                            Giorno = 3,
                            IdItinerario = 2,
                            Titolo = "Grande Muraglia"
                        },
                        new
                        {
                            IdItinerarioGiorno = 13,
                            Descrizione = "Visita alla zona moderna di Pechino, comprensiva di un tour del quartiere commerciale.",
                            Giorno = 4,
                            IdItinerario = 2,
                            Titolo = "Pechino Moderna"
                        },
                        new
                        {
                            IdItinerarioGiorno = 14,
                            Descrizione = "Volo per Xian e visita all'Esercito di Terracotta.",
                            Giorno = 5,
                            IdItinerario = 2,
                            Titolo = "Xian e l'Esercito di Terracotta"
                        },
                        new
                        {
                            IdItinerarioGiorno = 15,
                            Descrizione = "Arrivo a Chengdu e visita al centro di ricerca per la protezione del panda gigante.",
                            Giorno = 6,
                            IdItinerario = 2,
                            Titolo = "Visita a Chengdu"
                        },
                        new
                        {
                            IdItinerarioGiorno = 16,
                            Descrizione = "Visita a un monastero buddista e passeggiata nei parchi locali.",
                            Giorno = 7,
                            IdItinerario = 2,
                            Titolo = "Tour di Chengdu"
                        },
                        new
                        {
                            IdItinerarioGiorno = 17,
                            Descrizione = "Visita ai templi e mercati storici della vecchia Pechino.",
                            Giorno = 8,
                            IdItinerario = 2,
                            Titolo = "Pechino Antica"
                        },
                        new
                        {
                            IdItinerarioGiorno = 18,
                            Descrizione = "Partenza per Shanghai e visita al Bund e alla zona moderna della città.",
                            Giorno = 9,
                            IdItinerario = 2,
                            Titolo = "Viaggio a Shanghai"
                        },
                        new
                        {
                            IdItinerarioGiorno = 19,
                            Descrizione = "Visita ai templi antichi e al Giardino Yu.",
                            Giorno = 10,
                            IdItinerario = 2,
                            Titolo = "Shanghai Antica"
                        },
                        new
                        {
                            IdItinerarioGiorno = 20,
                            Descrizione = "Giornata dedicata allo shopping nei quartieri più famosi di Shanghai.",
                            Giorno = 11,
                            IdItinerario = 2,
                            Titolo = "Shopping a Shanghai"
                        },
                        new
                        {
                            IdItinerarioGiorno = 21,
                            Descrizione = "Trasferimento all'aeroporto per il volo di ritorno.",
                            Giorno = 12,
                            IdItinerario = 2,
                            Titolo = "Partenza"
                        },
                        new
                        {
                            IdItinerarioGiorno = 22,
                            Descrizione = "Arrivo a Tokyo e sistemazione in hotel.",
                            Giorno = 1,
                            IdItinerario = 3,
                            Titolo = "Arrivo in Giappone"
                        },
                        new
                        {
                            IdItinerarioGiorno = 23,
                            Descrizione = "Visita al Tempio di Senso-ji e al mercato di Nakamise.",
                            Giorno = 2,
                            IdItinerario = 3,
                            Titolo = "Tempio di Asakusa"
                        },
                        new
                        {
                            IdItinerarioGiorno = 24,
                            Descrizione = "Visita al Palazzo Imperiale e al parco circostante.",
                            Giorno = 3,
                            IdItinerario = 3,
                            Titolo = "Visita al Palazzo Imperiale"
                        },
                        new
                        {
                            IdItinerarioGiorno = 25,
                            Descrizione = "Visita al Santuario Toshogu e al Parco Nazionale di Nikko.",
                            Giorno = 4,
                            IdItinerario = 3,
                            Titolo = "Escursione a Nikko"
                        },
                        new
                        {
                            IdItinerarioGiorno = 26,
                            Descrizione = "Visita ai templi di Kyoto, incluso il famoso Tempio d’Oro.",
                            Giorno = 5,
                            IdItinerario = 3,
                            Titolo = "Visita a Kyoto"
                        },
                        new
                        {
                            IdItinerarioGiorno = 27,
                            Descrizione = "Escursione a Nara, famosa per il Parco dei Cervi e il Tempio Todai-ji.",
                            Giorno = 6,
                            IdItinerario = 3,
                            Titolo = "Nara"
                        },
                        new
                        {
                            IdItinerarioGiorno = 28,
                            Descrizione = "Esplorazione di Osaka, con visita al Castello di Osaka e al quartiere Dotonbori.",
                            Giorno = 7,
                            IdItinerario = 3,
                            Titolo = "Osaka"
                        },
                        new
                        {
                            IdItinerarioGiorno = 29,
                            Descrizione = "Visita al Parco della Pace e al Museo della Pace di Hiroshima.",
                            Giorno = 8,
                            IdItinerario = 3,
                            Titolo = "Hiroshima"
                        },
                        new
                        {
                            IdItinerarioGiorno = 30,
                            Descrizione = "Escursione all'isola di Miyajima, famosa per il Torii galleggiante.",
                            Giorno = 9,
                            IdItinerario = 3,
                            Titolo = "Miyajima"
                        },
                        new
                        {
                            IdItinerarioGiorno = 31,
                            Descrizione = "Visita alla città di Kobe, famosa per la carne di manzo Kobe.",
                            Giorno = 10,
                            IdItinerario = 3,
                            Titolo = "Kobe"
                        },
                        new
                        {
                            IdItinerarioGiorno = 32,
                            Descrizione = "Visita alla zona termale di Hakone e alle sue splendide vedute del Monte Fuji.",
                            Giorno = 11,
                            IdItinerario = 3,
                            Titolo = "Hakone"
                        },
                        new
                        {
                            IdItinerarioGiorno = 33,
                            Descrizione = "Giornata dedicata a Tokyo Disneyland.",
                            Giorno = 12,
                            IdItinerario = 3,
                            Titolo = "Tokyo Disneyland"
                        },
                        new
                        {
                            IdItinerarioGiorno = 34,
                            Descrizione = "Giornata di shopping a Shibuya e Shinjuku.",
                            Giorno = 13,
                            IdItinerario = 3,
                            Titolo = "Shopping a Tokyo"
                        },
                        new
                        {
                            IdItinerarioGiorno = 35,
                            Descrizione = "Escursione al Monte Fuji e visita ai suoi laghi.",
                            Giorno = 14,
                            IdItinerario = 3,
                            Titolo = "Escursione al Monte Fuji"
                        },
                        new
                        {
                            IdItinerarioGiorno = 36,
                            Descrizione = "Trasferimento all'aeroporto di Tokyo per il volo di ritorno.",
                            Giorno = 15,
                            IdItinerario = 3,
                            Titolo = "Partenza"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Paese", b =>
                {
                    b.Property<int>("IdPaese")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaese"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPaese");

                    b.ToTable("Paesi");

                    b.HasData(
                        new
                        {
                            IdPaese = 1,
                            Nome = "Thailandia"
                        },
                        new
                        {
                            IdPaese = 2,
                            Nome = "Cina"
                        },
                        new
                        {
                            IdPaese = 3,
                            Nome = "Giappone"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Partenza", b =>
                {
                    b.Property<int>("IdPartenza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPartenza"));

                    b.Property<DateOnly>("DataPartenza")
                        .HasColumnType("date");

                    b.Property<int>("IdItinerario")
                        .HasColumnType("int");

                    b.Property<int>("PostiDisponibili")
                        .HasColumnType("int");

                    b.Property<string>("Stato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPartenza");

                    b.HasIndex("IdItinerario");

                    b.ToTable("Partenze");

                    b.HasData(
                        new
                        {
                            IdPartenza = 1,
                            DataPartenza = new DateOnly(2025, 6, 10),
                            IdItinerario = 1,
                            PostiDisponibili = 15,
                            Stato = "Disponibile"
                        },
                        new
                        {
                            IdPartenza = 2,
                            DataPartenza = new DateOnly(2025, 7, 20),
                            IdItinerario = 1,
                            PostiDisponibili = 10,
                            Stato = "Disponibile"
                        },
                        new
                        {
                            IdPartenza = 3,
                            DataPartenza = new DateOnly(2025, 8, 5),
                            IdItinerario = 2,
                            PostiDisponibili = 5,
                            Stato = "Sold Out"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Recensione", b =>
                {
                    b.Property<int>("IdRecensione")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecensione"));

                    b.Property<string>("Commento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("IdItinerario")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Valutazione")
                        .HasColumnType("int");

                    b.HasKey("IdRecensione");

                    b.HasIndex("IdItinerario");

                    b.HasIndex("UserId");

                    b.ToTable("Recensioni");

                    b.HasData(
                        new
                        {
                            IdRecensione = 1,
                            Commento = "Un tour fantastico, lo consiglio a tutti!",
                            CreatedAt = new DateOnly(2025, 4, 11),
                            IdItinerario = 1,
                            UserId = "1",
                            Valutazione = 5
                        },
                        new
                        {
                            IdRecensione = 2,
                            Commento = "Ottimo, ma il prezzo potrebbe essere più basso.",
                            CreatedAt = new DateOnly(2025, 4, 11),
                            IdItinerario = 2,
                            UserId = "2",
                            Valutazione = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Capstone.Models.Carrello", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", "User")
                        .WithOne("Carrello")
                        .HasForeignKey("Capstone.Models.Carrello", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Capstone.Models.CarrelloItem", b =>
                {
                    b.HasOne("Capstone.Models.Carrello", "Carrello")
                        .WithMany("CarrelloItems")
                        .HasForeignKey("IdCarrello")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany()
                        .HasForeignKey("IdItinerario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Capstone.Models.ItinerarioFasciaPrezzo", "ItinerarioFasciaPrezzo")
                        .WithMany()
                        .HasForeignKey("IdItinerarioFasciaPrezzo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Partenza", "Partenza")
                        .WithMany()
                        .HasForeignKey("IdPartenza")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Carrello");

                    b.Navigation("Itinerario");

                    b.Navigation("ItinerarioFasciaPrezzo");

                    b.Navigation("Partenza");
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.HasOne("Capstone.Models.Paese", "Paese")
                        .WithMany("Itinerari")
                        .HasForeignKey("PaeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paese");
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioFasciaPrezzo", b =>
                {
                    b.HasOne("Capstone.Models.FasciaDiPrezzo", "FasciaDiPrezzo")
                        .WithMany("Itinerari")
                        .HasForeignKey("IdFasciaDiPrezzo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("ItinerarioFascePrezzo")
                        .HasForeignKey("IdItinerario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FasciaDiPrezzo");

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioGiorno", b =>
                {
                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("ItinerarioGiorni")
                        .HasForeignKey("IdItinerario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Capstone.Models.Partenza", b =>
                {
                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("Partenze")
                        .HasForeignKey("IdItinerario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Capstone.Models.Recensione", b =>
                {
                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("Recensioni")
                        .HasForeignKey("IdItinerario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.ApplicationUser", "User")
                        .WithMany("Recensioni")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerario");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUser", b =>
                {
                    b.Navigation("Carrello")
                        .IsRequired();

                    b.Navigation("Recensioni");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Capstone.Models.Carrello", b =>
                {
                    b.Navigation("CarrelloItems");
                });

            modelBuilder.Entity("Capstone.Models.FasciaDiPrezzo", b =>
                {
                    b.Navigation("Itinerari");
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.Navigation("ItinerarioFascePrezzo");

                    b.Navigation("ItinerarioGiorni");

                    b.Navigation("Partenze");

                    b.Navigation("Recensioni");
                });

            modelBuilder.Entity("Capstone.Models.Paese", b =>
                {
                    b.Navigation("Itinerari");
                });
#pragma warning restore 612, 618
        }
    }
}
