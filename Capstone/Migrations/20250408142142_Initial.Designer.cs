// <auto-generated />
using System;
using Capstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408142142_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aee0ff4f-202b-4b80-ac32-63644a072953",
                            ConcurrencyStamp = "aee0ff4f-202b-4b80-ac32-63644a072953",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "424b0d3d-d302-49d2-b8c7-f40579e73c82",
                            ConcurrencyStamp = "424b0d3d-d302-49d2-b8c7-f40579e73c82",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Capstone.Models.Carrello.Carrello", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carrelli");
                });

            modelBuilder.Entity("Capstone.Models.Carrello.CarrelloItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrelloId")
                        .HasColumnType("int");

                    b.Property<int>("FasciaDiPrezzoId")
                        .HasColumnType("int");

                    b.Property<int>("ItinerarioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrelloId");

                    b.HasIndex("FasciaDiPrezzoId");

                    b.HasIndex("ItinerarioId");

                    b.ToTable("CarrelloItems");
                });

            modelBuilder.Entity("Capstone.Models.FasciaDiPrezzo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FasceDiPrezzo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Economica"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Standard"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Lusso"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Durata")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PaeseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaeseId");

                    b.ToTable("Itinerari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Durata = 9,
                            Nome = "Tour in Thailandia",
                            PaeseId = 1
                        },
                        new
                        {
                            Id = 2,
                            Durata = 12,
                            Nome = "Tour in Cina",
                            PaeseId = 2
                        },
                        new
                        {
                            Id = 3,
                            Durata = 15,
                            Nome = "Tour in Giappone",
                            PaeseId = 3
                        });
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioFasciaPrezzo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FasciaDiPrezzoId")
                        .HasColumnType("int");

                    b.Property<int>("ItinerarioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("FasciaDiPrezzoId");

                    b.HasIndex("ItinerarioId");

                    b.ToTable("ItinerarioFascePrezzo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FasciaDiPrezzoId = 1,
                            ItinerarioId = 1,
                            Prezzo = 999.99m
                        },
                        new
                        {
                            Id = 2,
                            FasciaDiPrezzoId = 2,
                            ItinerarioId = 1,
                            Prezzo = 1499.99m
                        },
                        new
                        {
                            Id = 3,
                            FasciaDiPrezzoId = 3,
                            ItinerarioId = 1,
                            Prezzo = 1999.99m
                        },
                        new
                        {
                            Id = 4,
                            FasciaDiPrezzoId = 1,
                            ItinerarioId = 2,
                            Prezzo = 1200.00m
                        },
                        new
                        {
                            Id = 5,
                            FasciaDiPrezzoId = 2,
                            ItinerarioId = 2,
                            Prezzo = 1700.00m
                        },
                        new
                        {
                            Id = 6,
                            FasciaDiPrezzoId = 3,
                            ItinerarioId = 2,
                            Prezzo = 2200.00m
                        },
                        new
                        {
                            Id = 7,
                            FasciaDiPrezzoId = 1,
                            ItinerarioId = 3,
                            Prezzo = 1500.00m
                        },
                        new
                        {
                            Id = 8,
                            FasciaDiPrezzoId = 2,
                            ItinerarioId = 3,
                            Prezzo = 2000.00m
                        },
                        new
                        {
                            Id = 9,
                            FasciaDiPrezzoId = 3,
                            ItinerarioId = 3,
                            Prezzo = 2500.00m
                        });
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioGiorno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Giorno")
                        .HasColumnType("int");

                    b.Property<int>("ItinerarioId")
                        .HasColumnType("int");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ItinerarioId");

                    b.ToTable("ItinerarioGiorni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descrizione = "Arrivo all'aeroporto internazionale di Bangkok e trasferimento in hotel.",
                            Giorno = 1,
                            ItinerarioId = 1,
                            Titolo = "Arrivo in Thailandia"
                        },
                        new
                        {
                            Id = 2,
                            Descrizione = "Visita al Tempio del Buddha di Smeraldo e alla Grande Sala del Trono.",
                            Giorno = 2,
                            ItinerarioId = 1,
                            Titolo = "Visita al Tempio"
                        },
                        new
                        {
                            Id = 3,
                            Descrizione = "Esplorazione dei famosi mercati galleggianti e pranzo tipico.",
                            Giorno = 3,
                            ItinerarioId = 1,
                            Titolo = "Mercati galleggianti"
                        },
                        new
                        {
                            Id = 4,
                            Descrizione = "Visita al Palazzo Reale e al Museo Nazionale.",
                            Giorno = 4,
                            ItinerarioId = 1,
                            Titolo = "Tour della città"
                        },
                        new
                        {
                            Id = 5,
                            Descrizione = "Escursione a Ayutthaya, la storica capitale del regno del Siam.",
                            Giorno = 5,
                            ItinerarioId = 1,
                            Titolo = "Visita a Ayutthaya"
                        },
                        new
                        {
                            Id = 6,
                            Descrizione = "Arrivo a Ko Samui per una giornata di relax sulle spiagge esotiche.",
                            Giorno = 6,
                            ItinerarioId = 1,
                            Titolo = "Isola di Ko Samui"
                        },
                        new
                        {
                            Id = 7,
                            Descrizione = "Giornata dedicata allo snorkeling e visita delle isole vicine a Ko Samui.",
                            Giorno = 7,
                            ItinerarioId = 1,
                            Titolo = "Snorkeling e visite alle isole"
                        },
                        new
                        {
                            Id = 8,
                            Descrizione = "Trasferimento a Chiang Mai e visita ai templi locali.",
                            Giorno = 8,
                            ItinerarioId = 1,
                            Titolo = "Visita a Chiang Mai"
                        },
                        new
                        {
                            Id = 9,
                            Descrizione = "Tempo libero per shopping e ritorno all'aeroporto per il volo di ritorno.",
                            Giorno = 9,
                            ItinerarioId = 1,
                            Titolo = "Partenza"
                        },
                        new
                        {
                            Id = 10,
                            Descrizione = "Arrivo a Pechino, trasferimento in hotel e visita alla Piazza Tiananmen.",
                            Giorno = 1,
                            ItinerarioId = 2,
                            Titolo = "Arrivo in Cina"
                        },
                        new
                        {
                            Id = 11,
                            Descrizione = "Visita alla Città Proibita e al Tempio del Cielo.",
                            Giorno = 2,
                            ItinerarioId = 2,
                            Titolo = "Città Proibita"
                        },
                        new
                        {
                            Id = 12,
                            Descrizione = "Escursione alla Grande Muraglia Cinese.",
                            Giorno = 3,
                            ItinerarioId = 2,
                            Titolo = "Grande Muraglia"
                        },
                        new
                        {
                            Id = 13,
                            Descrizione = "Visita alla zona moderna di Pechino, comprensiva di un tour del quartiere commerciale.",
                            Giorno = 4,
                            ItinerarioId = 2,
                            Titolo = "Pechino Moderna"
                        },
                        new
                        {
                            Id = 14,
                            Descrizione = "Volo per Xian e visita all'Esercito di Terracotta.",
                            Giorno = 5,
                            ItinerarioId = 2,
                            Titolo = "Xian e l'Esercito di Terracotta"
                        },
                        new
                        {
                            Id = 15,
                            Descrizione = "Arrivo a Chengdu e visita al centro di ricerca per la protezione del panda gigante.",
                            Giorno = 6,
                            ItinerarioId = 2,
                            Titolo = "Visita a Chengdu"
                        },
                        new
                        {
                            Id = 16,
                            Descrizione = "Visita a un monastero buddista e passeggiata nei parchi locali.",
                            Giorno = 7,
                            ItinerarioId = 2,
                            Titolo = "Tour di Chengdu"
                        },
                        new
                        {
                            Id = 17,
                            Descrizione = "Visita ai templi e mercati storici della vecchia Pechino.",
                            Giorno = 8,
                            ItinerarioId = 2,
                            Titolo = "Pechino Antica"
                        },
                        new
                        {
                            Id = 18,
                            Descrizione = "Partenza per Shanghai e visita al Bund e alla zona moderna della città.",
                            Giorno = 9,
                            ItinerarioId = 2,
                            Titolo = "Viaggio a Shanghai"
                        },
                        new
                        {
                            Id = 19,
                            Descrizione = "Visita ai templi antichi e al Giardino Yu.",
                            Giorno = 10,
                            ItinerarioId = 2,
                            Titolo = "Shanghai Antica"
                        },
                        new
                        {
                            Id = 20,
                            Descrizione = "Giornata dedicata allo shopping nei quartieri più famosi di Shanghai.",
                            Giorno = 11,
                            ItinerarioId = 2,
                            Titolo = "Shopping a Shanghai"
                        },
                        new
                        {
                            Id = 21,
                            Descrizione = "Trasferimento all'aeroporto per il volo di ritorno.",
                            Giorno = 12,
                            ItinerarioId = 2,
                            Titolo = "Partenza"
                        },
                        new
                        {
                            Id = 22,
                            Descrizione = "Arrivo a Tokyo e sistemazione in hotel.",
                            Giorno = 1,
                            ItinerarioId = 3,
                            Titolo = "Arrivo in Giappone"
                        },
                        new
                        {
                            Id = 23,
                            Descrizione = "Visita al Tempio di Senso-ji e al mercato di Nakamise.",
                            Giorno = 2,
                            ItinerarioId = 3,
                            Titolo = "Tempio di Asakusa"
                        },
                        new
                        {
                            Id = 24,
                            Descrizione = "Visita al Palazzo Imperiale e al parco circostante.",
                            Giorno = 3,
                            ItinerarioId = 3,
                            Titolo = "Visita al Palazzo Imperiale"
                        },
                        new
                        {
                            Id = 25,
                            Descrizione = "Visita al Santuario Toshogu e al Parco Nazionale di Nikko.",
                            Giorno = 4,
                            ItinerarioId = 3,
                            Titolo = "Escursione a Nikko"
                        },
                        new
                        {
                            Id = 26,
                            Descrizione = "Visita ai templi di Kyoto, incluso il famoso Tempio d’Oro.",
                            Giorno = 5,
                            ItinerarioId = 3,
                            Titolo = "Visita a Kyoto"
                        },
                        new
                        {
                            Id = 27,
                            Descrizione = "Escursione a Nara, famosa per il Parco dei Cervi e il Tempio Todai-ji.",
                            Giorno = 6,
                            ItinerarioId = 3,
                            Titolo = "Nara"
                        },
                        new
                        {
                            Id = 28,
                            Descrizione = "Esplorazione di Osaka, con visita al Castello di Osaka e al quartiere Dotonbori.",
                            Giorno = 7,
                            ItinerarioId = 3,
                            Titolo = "Osaka"
                        },
                        new
                        {
                            Id = 29,
                            Descrizione = "Visita al Parco della Pace e al Museo della Pace di Hiroshima.",
                            Giorno = 8,
                            ItinerarioId = 3,
                            Titolo = "Hiroshima"
                        },
                        new
                        {
                            Id = 30,
                            Descrizione = "Escursione all'isola di Miyajima, famosa per il Torii galleggiante.",
                            Giorno = 9,
                            ItinerarioId = 3,
                            Titolo = "Miyajima"
                        },
                        new
                        {
                            Id = 31,
                            Descrizione = "Visita alla città di Kobe, famosa per la carne di manzo Kobe.",
                            Giorno = 10,
                            ItinerarioId = 3,
                            Titolo = "Kobe"
                        },
                        new
                        {
                            Id = 32,
                            Descrizione = "Visita alla zona termale di Hakone e alle sue splendide vedute del Monte Fuji.",
                            Giorno = 11,
                            ItinerarioId = 3,
                            Titolo = "Hakone"
                        },
                        new
                        {
                            Id = 33,
                            Descrizione = "Giornata dedicata a Tokyo Disneyland.",
                            Giorno = 12,
                            ItinerarioId = 3,
                            Titolo = "Tokyo Disneyland"
                        },
                        new
                        {
                            Id = 34,
                            Descrizione = "Giornata di shopping a Shibuya e Shinjuku.",
                            Giorno = 13,
                            ItinerarioId = 3,
                            Titolo = "Shopping a Tokyo"
                        },
                        new
                        {
                            Id = 35,
                            Descrizione = "Escursione al Monte Fuji e visita ai suoi laghi.",
                            Giorno = 14,
                            ItinerarioId = 3,
                            Titolo = "Escursione al Monte Fuji"
                        },
                        new
                        {
                            Id = 36,
                            Descrizione = "Trasferimento all'aeroporto di Tokyo per il volo di ritorno.",
                            Giorno = 15,
                            ItinerarioId = 3,
                            Titolo = "Partenza"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Paese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Paesi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Thailandia"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Cina"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Giappone"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Capstone.Models.Carrello.CarrelloItem", b =>
                {
                    b.HasOne("Capstone.Models.Carrello.Carrello", "Carrello")
                        .WithMany("CarrelloItems")
                        .HasForeignKey("CarrelloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.FasciaDiPrezzo", "FasciaDiPrezzo")
                        .WithMany()
                        .HasForeignKey("FasciaDiPrezzoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany()
                        .HasForeignKey("ItinerarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrello");

                    b.Navigation("FasciaDiPrezzo");

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.HasOne("Capstone.Models.Paese", "Paese")
                        .WithMany("Itinerari")
                        .HasForeignKey("PaeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paese");
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioFasciaPrezzo", b =>
                {
                    b.HasOne("Capstone.Models.FasciaDiPrezzo", "FasciaDiPrezzo")
                        .WithMany("Itinerari")
                        .HasForeignKey("FasciaDiPrezzoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("FasceDiPrezzo")
                        .HasForeignKey("ItinerarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FasciaDiPrezzo");

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Capstone.Models.ItinerarioGiorno", b =>
                {
                    b.HasOne("Capstone.Models.Itinerario", "Itinerario")
                        .WithMany("ItinerarioGiorni")
                        .HasForeignKey("ItinerarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Capstone.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Capstone.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Capstone.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Capstone.Models.Carrello.Carrello", b =>
                {
                    b.Navigation("CarrelloItems");
                });

            modelBuilder.Entity("Capstone.Models.FasciaDiPrezzo", b =>
                {
                    b.Navigation("Itinerari");
                });

            modelBuilder.Entity("Capstone.Models.Itinerario", b =>
                {
                    b.Navigation("FasceDiPrezzo");

                    b.Navigation("ItinerarioGiorni");
                });

            modelBuilder.Entity("Capstone.Models.Paese", b =>
                {
                    b.Navigation("Itinerari");
                });
#pragma warning restore 612, 618
        }
    }
}
